#Step 1: Install Docker #

sudo apt-get update: Updates the local package list.
sudo apt install docker.io -y:    

#Installs Docker from the default Ubuntu repositories.

#Step 2: Start Docker & Check Status

sudo systemctl start docker: Starts the Docker service.
sudo systemctl status docker: Checks if Docker is running properly.

#Step 3: Add Your User to the Docker Group
sudo usermod -aG docker ubuntu: Adds the user ubuntu to the Docker group so you can run Docker without sudo.

#Step 4: Verify Docker Installation
docker run hello-world: Runs a test container to confirm Docker is installed correctly.

#Step 5: Clone Docker Practice Project
git clone https://github.com/deepakkesarkar8809/Docker_Practice.git: Clones your practice repository.

cd Docker_Practice/: Enters the cloned directory.

cat Dockerfile: Views the contents of the Dockerfile used for building your custom image.

#Step 6: Login to Docker Hub
docker login -u deepakops: Logs into your Docker Hub account so you can push/pull images.

#Step 7: Build Docker Image
docker build -t deepakops/myfirstdockerimage:latest .: Builds a Docker image from your Dockerfile and tags it as latest.

#Step 8: Push Image to Docker Hub
docker push deepakops/myfirstdockerimage:latest: Uploads your image to Docker Hub so itâ€™s available remotely.

#Step 9: Pull Image from Docker Hub
docker pull deepakops/myfirstdockerimage:latest: Downloads the image back from Docker Hub to test availability.

#Step 10: Run a Container from the Image
docker run --name myfirstcontainer deepakops/myfirstdockerimage:latest: Creates and runs a new container from your image.

#Step 11: View Container Logs
docker logs myfirstcontainer: Shows logs/output generated by the container.

#Step 12: List Containers
docker ps: Shows running containers.
docker ps -a: Shows all containers (including stopped).
docker ps -f "status=exited": Filters only exited containers.

#Step 13: Clean Up Docker Resources
docker container prune -f: Removes all stopped containers.
docker image prune -a -f: Removes all unused images.
docker system prune -a --volumes -f: Removes all unused containers, images, volumes, and networks to free space.
